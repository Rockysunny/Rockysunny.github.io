
!function() {
    // 用于scroll地图和文字区

    // 用于设置背景固定不需要改变
    function t(e, t) {
        var n = new ScrollMagic.Scene({
            // #为scorllpole的元素为trigger
            triggerElement: "#" + t.id,
            // 使用范围为其父级元素也就是是滑动区的整个高度
            // add（To）将场景添加到控制器。
            // setPin，将整个map元素固定在界面固定位置
            duration: t.parentNode.getBoundingClientRect().height
        }).addTo(e).setPin("#" + t.id, {
            pushFollowers: !1
            // 设置滚动持续
        });
        C.push(n);
    }
    // 用于变色,主义使用该函数要配合修改css
    function n(e, t, n, o) {
        new ScrollMagic.Scene({
            triggerElement: t
        }).addTo(e).setClassToggle(n, o)
        // 添加类
    }
    function o(e, t) {
        new ScrollMagic.Scene({
            triggerElement: t
        }).addTo(e).on("enter", function() {
            var e = t.getBoundingClientRect().left
              , n = c(e - 200, t)
              , o = {
                duration: 1e3,
                timing: k.powerInOut(3),
                draw: function(o) {
                    return t.style.left = Math.round(e * (1 - o) + n * o) + "px"
                }
            };
            e != n && (R = !1,
            i(o))
        })
    }
    function r(e) {
        var t = new ScrollMagic.Scene({
            triggerElement: "video"
        }).addTo(e).on("enter", function() {
            document.querySelector("video").play(),
            t.remove()
        })
    }
    function i(e) {
        function t() {
            var o = (Date.now() - n) / e.duration;
            o > 1 && (o = 1),
            e.draw(e.timing(o)),
            o < 1 && !R && (R = !1,
            requestAnimationFrame(t))
        }
        var n = Date.now();
        requestAnimationFrame(t)
    }
    function c(e, t) {
        // n为被查询指标的对象内容的可视区的宽度减去对应的长度
        var n = document.documentElement.clientWidth - t.getBoundingClientRect().width;
        // 返回e
        // 判断1：n小于0么
            //n<0，判断e大于0么
                // e>0 e=0 并返回
                // 否则判断e和n,e比n小，则e=n，否则等于e
            // 返回n的一版
        return e = n < 0 ? e > 0 ? 0 : e < n ? n : e : n / 2
    }
    function l() {
        var e = function(e, t) {
            return function(n) {
                n.stopPropagation();
                var o = n.target.parentNode.querySelector(".help");
                o && o.remove();
                var r = '<div class="passport"><img src="img/' + e.id + '_s.jpg" alt=""/><div><span class="name">' + e.name[B] + '</span><span class="country">' + e.country[B] + '</span><span class="role">' + e.role[B] + "</span></div></div>";
                if (e.info[t][B]) {
                    var i = e.info[t][B];
                    i = u(i),
                    i = a(i),
                    r += '<div class="info">' + i + "</div>"
                }
                N.innerHTML = r,
                N.classList.remove("off")
            }
        };
        Array.from(document.querySelectorAll(".team svg")).forEach(function(t, n) {
            b.team.forEach(function(o) {
                var r = document.createElementNS(A, "path");
                r.setAttributeNS(null, "fill", o.info[n].color),
                r.setAttributeNS(null, "d", o.path),
                r.addEventListener("click", e(o, n), !1),
                r.addEventListener("mouseover", e(o, n), !1),
                r.addEventListener("mouseout", v, !1),
                r.addEventListener("mousemove", f, !1),
                t.appendChild(r)
            }),
            b.groups.forEach(function(e) {
                var n = document.createElementNS(A, "text");
                n.setAttributeNS(null, "text-anchor", "middle"),
                n.setAttributeNS(null, "transform", "matrix(1 0 0 1 " + e.point[0] + " " + e.point[1] + ")"),
                n.innerHTML = e.info[B],
                t.appendChild(n)
            });
            var o = document.createElementNS(A, "line");
            o.setAttributeNS(null, "fill", "none"),
            o.setAttributeNS(null, "stroke", "#334"),
            o.setAttributeNS(null, "stroke-width", 2),
            o.setAttributeNS(null, "x1", 0),
            o.setAttributeNS(null, "y1", 125),
            o.setAttributeNS(null, "x2", 960),
            o.setAttributeNS(null, "y2", 125),
            t.appendChild(o)
        })
    }
    function s(e) {
        b.map.forEach(function(t) {
            var n = document.createElementNS(A, "g");
            n.classList.add("hide"),
            n.classList.add("m" + t.step),
            n.setAttributeNS(null, "data-start", t.start || 0),
            n.setAttributeNS(null, "data-end", t.end || 1);
            var o = document.createElementNS(A, "circle");
            o.classList.add("point"),
            o.style.transformOrigin = t.point[0] + "px " + t.point[1] + "px",
            o.setAttributeNS(null, "cx", t.point[0]),
            o.setAttributeNS(null, "cy", t.point[1]),
            o.setAttributeNS(null, "r", 4),
            o.setAttributeNS(null, "stroke-width", .6),
            o.addEventListener("click", H(t[B]), !1),
            o.addEventListener("mouseover", H(t[B]), !1),
            o.addEventListener("mouseout", v, !1),
            o.addEventListener("mousemove", f, !1),
            n.appendChild(o),
            e.querySelector(".marks").appendChild(n)
        })
    }
    function m(e) {
        function t(t) {
            R = !0,
            "touchstart" == t.type ? (t.stopPropagation(),
            e.addEventListener("touchmove", n, !1)) : e.addEventListener("mousemove", n, !1),
            r.t0 = Date.now(),
            r.x0 = e.getBoundingClientRect().left,
            r.x1 = t.pageX,
            r.dx = 0
        }
        function n(t) {
            N.classList.add("off"),
            N.innerHTML = "",
            r.dx = t.pageX - r.x1,
            e.style.left = c(r.x0 + r.dx, e) + "px"
        }
        function o(t) {
            if ("touchend" == t.type ? (t.stopPropagation(),
            e.removeEventListener("touchmove", n, !1)) : e.removeEventListener("mousemove", n, !1),
            r.dt = Date.now() - r.t0,
            r.dt < 250) {
                var o = e.getBoundingClientRect().left
                  , a = c(r.x0 + r.dx * Math.abs(r.dx / r.dt), e)
                  , u = {
                    duration: 500,
                    timing: k.powerOut(3),
                    draw: function(t) {
                        return e.style.left = Math.round(o * (1 - t) + a * t) + "px"
                    }
                };
                o != a && (R = !1,
                i(u))
            }
        }
        var r = {
            x0: 0,
            x1: 0,
            dx: 0,
            t0: 0,
            dt: 0
        }
          , a = document.createElementNS(A, "g");
        a.classList.add("tips"),
        b[e.parentNode.id].forEach(function(e) {
            var t = document.createElementNS(A, "circle");
            t.setAttributeNS(null, "cx", e.point[0]),
            t.setAttributeNS(null, "cy", e.point[1]),
            t.setAttributeNS(null, "r", 8),
            t.setAttributeNS(null, "stroke-width", 1),
            t.addEventListener("click", H(e.info[B]), !1),
            t.addEventListener("mouseover", H(e.info[B]), !1),
            t.addEventListener("mouseout", v, !1),
            t.addEventListener("mousemove", f, !1),
            a.appendChild(t)
        }),
        e.appendChild(a),
        e.addEventListener("touchstart", t, !1),
        e.addEventListener("touchend", o, !1),
        e.addEventListener("mousedown", t, !1),
        e.addEventListener("mouseup", o, !1)
        }
    function g() {
        // 清空T
        clearTimeout(T),
        T = setTimeout(function() {
            // M为长图
            M.style.left = c(M.getBoundingClientRect().left, M) + "px",
            // x.style.left = c(x.getBoundingClientRect().left, x) + "px",
            Array.from(document.querySelectorAll(".interactive")).forEach(function(e, t) {
                var n = e.getBoundingClientRect().height;
                C[t].duration(n)
            })
        }, 1e3)
    }
    function f(e) {
        var t = e.x
          , n = e.pageY
          , o = N.getBoundingClientRect().width / 2
          , r = N.getBoundingClientRect().height
          , i = o + 20
          , c = document.documentElement.clientWidth - i
          , a = document.documentElement.clientHeight - (r + 40);
        t < i && (t = i),
        t > c && (t = c),
        e.y > a && (n -= r + 30),
        N.style.top = Math.floor(n + 20) + "px",
        N.style.left = Math.floor(t - o) + "px"
    }
    // 滚动的时候让最后一个div的class变为off
    // function v(e) {
    //     N.classList.add("off"),
    //     N.innerHTML = ""
    // }
    // 通过改变class，控制图片放大缩小
    function y(e) {
        "mouseout" == e.type ? this.classList.remove("magnify") : this.classList.toggle("magnify")
    }
    // 定义了一系列东西
    // 定义A为用于放置组织不同XML文件造成命名混乱的文件
    var A = "http://www.w3.org/2000/svg"
      , b = function(e) {
        // 以下都看不懂
        var t = new XMLHttpRequest;
        t.open("GET", e, !1),
        t.send();
        // n = 
        var n = 200 != t.status ? "{}" : t.responseText;
        return JSON.parse(n)
        }("data/data.json")
      , x = document.querySelector("#cut svg")
      , M = document.querySelector("#panoram svg")
      , I = document.querySelector("#svalbard svg")
      // 获取网页最后的一个空div
      , N = document.getElementById("popup")
      , q = document.querySelector("nav")
      , k = {
        powerIn: function(e) {
            return function(t) {
                return Math.pow(t, e)
            }
        },
        powerOut: function(e) {
            return function(t) {
                return 1 - Math.abs(Math.pow(t - 1, e))
            }
        },
        powerInOut: function(e) {
            return function(t) {
                return t < .5 ? k.powerIn(e)(2 * t) / 2 : k.powerOut(e)(2 * t - 1) / 2 + .5
            }
        },
        sinIn: function(e) {
            return 1 + Math.sin(Math.PI / 2 * e - Math.PI / 2)
        },
        sinOut: function(e) {
            return Math.sin(Math.PI / 2 * e)
        },
        sinInOut: function(e) {
            return (1 + Math.sin(Math.PI * e - Math.PI / 2)) / 2
        }
    }
      , C = []
      // T为设置的0.1秒时间
      , T = setTimeout(function() {}, 100)
      , R = !1
    // 真正执行的函数从这里开始
    !function() {
        var i = new ScrollMagic.Controller({
            globalSceneOptions: {
                triggerHook: "onEnter"
            }
        })
          , c = new ScrollMagic.Controller({
            globalSceneOptions: {
                triggerHook: "onCenter"
            }
        })
          , f = new ScrollMagic.Controller({
            globalSceneOptions: {
                triggerHook: "onLeave"
            }
        });
        n(c, "#controler1", "#chapter0", "fade"),
        // 设置地图页面固定，但text文件正常下滑
        Array.from(document.querySelectorAll(".map")).forEach(function(e) {
            return t(f, e)
        }),
        // 用于控制照片的放大
        Array.from(document.querySelectorAll(".zoom img")).forEach(function(e) {
            return e.addEventListener("click", y, !1)
        }),
        Array.from(document.querySelectorAll(".zoom img")).forEach(function(e) {
            return e.addEventListener("mouseout", y, !1)
        }),
        window.addEventListener("resize", g, !1),
        window.addEventListener("orientationChange", g, !1),
        window.addEventListener("fullScreenChange", g, !1),
        window.addEventListener("scroll", v, {passive: !0}),
        g()
    }()
}();
